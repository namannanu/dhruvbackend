{
  "info": {
    "name": "WorkConnect Backend API - Complete Collection",
    "description": "Comprehensive API collection for WorkConnect backend including userId system, team management, and public userId-based data access endpoints. Features: 1) Traditional token-based authentication, 2) Email-based team access granting, 3) Public userId endpoints for team members to access employee data without tokens.",
    "version": "3.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'https://dhruvbackend.vercel.app/api');",
          "}",
          "",
          "// Generate random userId for testing",
          "if (!pm.environment.get('testUserId')) {",
          "    const userId = Math.random().toString(36).substring(2, 8).toUpperCase() + Math.random().toString(36).substring(2, 4).toUpperCase();",
          "    pm.environment.set('testUserId', userId);",
          "}",
          "",
          "// Team Access Workflow Tips:",
          "// 1. Use 'Register User' to create employee and team member accounts",
          "// 2. Use 'Grant Team Access' with team member's email", 
          "// 3. Response will include 'employeeUserId' for team member to use",
          "// 4. Team member can access ALL employee data using userId endpoints:",
          "//    - GET /api/jobs/user/{employeeUserId}",
          "//    - GET /api/applications/user/{employeeUserId}",
          "//    - GET /api/attendance/user/{employeeUserId}",
          "//    - GET /api/businesses/user/{employeeUserId}",
          "//    - GET /api/payments/user/{employeeUserId}",
          "//    - GET /api/notifications/user/{employeeUserId}",
          "//    - GET /api/subscriptions/user/{employeeUserId}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://dhruvbackend.vercel.app/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUserId",
      "value": "A1B2C3D4",
      "type": "string"
    },
    {
      "key": "employeeUserId",
      "value": "",
      "type": "string",
      "description": "Employee's userId for team access - set automatically when granting team access"
    },
    {
      "key": "teamAccessId", 
      "value": "",
      "type": "string",
      "description": "Team access record ID - set automatically when granting team access"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication endpoints",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"John\",\n  \"lastname\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"password\": \"securePassword123\",\n  \"userType\": \"employer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.user) {",
                  "        pm.environment.set('userId', response.data.user.userId);",
                  "        pm.test('Registration successful', () => {",
                  "            pm.expect(response.data.user.userId).to.be.a('string');",
                  "            pm.expect(response.data.user.userId).to.have.lengthOf(8);",
                  "        });",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.token) {",
                  "        pm.environment.set('authToken', response.token);",
                  "    }",
                  "    if (response.data && response.data.user) {",
                  "        pm.environment.set('userId', response.data.user.userId);",
                  "    }",
                  "    pm.test('Login successful', () => {",
                  "        pm.expect(response.token).to.be.a('string');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Data Management",
      "description": "UserId-based data access endpoints",
      "item": [
        {
          "name": "Get All User Data by UserId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/data/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "data", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response has all data sections', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('jobs');",
                  "    pm.expect(response.data).to.have.property('applications');",
                  "    pm.expect(response.data).to.have.property('attendance');",
                  "    pm.expect(response.data).to.have.property('employments');",
                  "    pm.expect(response.data).to.have.property('payments');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Profile by UserId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/profile/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile", "{{userId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Team Management",
      "description": "Team access control and delegation endpoints",
      "item": [
        {
          "name": "Grant Team Access",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"targetUserEmail\": \"teammember@example.com\",\n  \"role\": \"manager\",\n  \"permissions\": {\n    \"canCreateJobs\": true,\n    \"canEditJobs\": true,\n    \"canViewJobs\": true,\n    \"canHireWorkers\": true,\n    \"canViewApplications\": true,\n    \"canManageApplications\": true,\n    \"canCreateAttendance\": true,\n    \"canViewAttendance\": true,\n    \"canEditAttendance\": false,\n    \"canManageEmployment\": false,\n    \"canViewEmployment\": true,\n    \"canViewPayments\": false,\n    \"canProcessPayments\": false,\n    \"canManageTeam\": false,\n    \"canViewTeamReports\": true\n  },\n  \"restrictions\": {\n    \"startDate\": \"2025-10-01\",\n    \"endDate\": \"2025-12-31\"\n  },\n  \"expiresAt\": \"2025-12-31T23:59:59.000Z\",\n  \"reason\": \"Temporary manager access for Q4 operations\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/team/grant-access",
              "host": ["{{baseUrl}}"],
              "path": ["team", "grant-access"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('teamAccessId', response.data.teamAccess._id);",
                  "    ",
                  "    // Set employeeUserId for team member to use in userId endpoints",
                  "    if (response.data.summary && response.data.summary.employeeUserId) {",
                  "        pm.environment.set('employeeUserId', response.data.summary.employeeUserId);",
                  "        console.log('✅ Team access granted! Employee userId: ' + response.data.summary.employeeUserId);",
                  "        console.log('📋 Team member can now access ALL data using these endpoints:');",
                  "        console.log('• Jobs: GET {{baseUrl}}/jobs/user/' + response.data.summary.employeeUserId);",
                  "        console.log('• Applications: GET {{baseUrl}}/applications/user/' + response.data.summary.employeeUserId);",
                  "        console.log('• Attendance: GET {{baseUrl}}/attendance/user/' + response.data.summary.employeeUserId);",
                  "        console.log('• Businesses: GET {{baseUrl}}/businesses/user/' + response.data.summary.employeeUserId);",
                  "        console.log('• Payments: GET {{baseUrl}}/payments/user/' + response.data.summary.employeeUserId);",
                  "        console.log('• Notifications: GET {{baseUrl}}/notifications/user/' + response.data.summary.employeeUserId);",
                  "        console.log('• Subscriptions: GET {{baseUrl}}/subscriptions/user/' + response.data.summary.employeeUserId);",
                  "    }",
                  "    ",
                  "    pm.test('Team access granted successfully', () => {",
                  "        pm.expect(response.data.teamAccess.role).to.equal('manager');",
                  "        pm.expect(response.data.teamAccess.status).to.equal('active');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "List My Team Members",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/team/my-team",
              "host": ["{{baseUrl}}"],
              "path": ["team", "my-team"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response contains team members', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('teamMembers');",
                  "    pm.expect(response.data.teamMembers).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List My Managed Access",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/team/my-access",
              "host": ["{{baseUrl}}"],
              "path": ["team", "my-access"]
            }
          }
        },
        {
          "name": "Check Team Access",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/team/check-access-by-email/employee@example.com?permission=canCreateJobs",
              "host": ["{{baseUrl}}"],
              "path": ["team", "check-access-by-email", "employee@example.com"],
              "query": [
                {
                  "key": "permission",
                  "value": "canCreateJobs"
                }
              ]
            }
          }
        },
        {
          "name": "Update Team Permissions",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"staff\",\n  \"permissions\": {\n    \"canCreateJobs\": false,\n    \"canEditJobs\": false,\n    \"canViewJobs\": true,\n    \"canViewApplications\": true,\n    \"canViewAttendance\": true\n  },\n  \"expiresAt\": \"2025-11-30T23:59:59.000Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/team/access/{{teamAccessId}}",
              "host": ["{{baseUrl}}"],
              "path": ["team", "access", "{{teamAccessId}}"]
            }
          }
        },
        {
          "name": "Revoke Team Access",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Project completed, access no longer needed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/team/access/{{teamAccessId}}",
              "host": ["{{baseUrl}}"],
              "path": ["team", "access", "{{teamAccessId}}"]
            }
          }
        },
        {
          "name": "Get Access Report",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/team/report/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["team", "report", "{{userId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Jobs with Location",
      "description": "Enhanced job management with Google Places integration",
      "item": [
        {
          "name": "Create Job with Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Construction Worker\",\n  \"description\": \"Building construction work with safety protocols\",\n  \"location\": {\n    \"address\": \"123 Main Street, New York, NY 10001\",\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060,\n    \"googlePlaceId\": \"ChIJOwg_06VPwokRYv534QaPC8g\",\n    \"geofenceRadius\": 150\n  },\n  \"salary\": 25,\n  \"salaryType\": \"hourly\",\n  \"requirements\": [\"Physical fitness\", \"Construction experience\", \"Safety certification\"],\n  \"workingHours\": {\n    \"start\": \"08:00\",\n    \"end\": \"17:00\"\n  },\n  \"category\": \"construction\",\n  \"skillsRequired\": [\"Heavy lifting\", \"Tool operation\"],\n  \"benefits\": [\"Health insurance\", \"Overtime pay\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/jobs",
              "host": ["{{baseUrl}}"],
              "path": ["jobs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('jobId', response.data._id);",
                  "    pm.test('Job created with location', () => {",
                  "        pm.expect(response.data.location).to.have.property('latitude');",
                  "        pm.expect(response.data.location).to.have.property('longitude');",
                  "        pm.expect(response.data.location.geofenceRadius).to.equal(150);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Jobs by UserId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/jobs/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "user", "{{userId}}"]
            }
          }
        },
        {
          "name": "Update Job Location",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"location\": {\n    \"address\": \"456 Updated Street, New York, NY 10002\",\n    \"latitude\": 40.7580,\n    \"longitude\": -73.9855,\n    \"googlePlaceId\": \"ChIJOwg_06VPwokRYv534QaPC8g\",\n    \"geofenceRadius\": 200\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "{{jobId}}"]
            }
          }
        },
        {
          "name": "Search Jobs by Location",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/jobs/search?latitude=40.7128&longitude=-74.0060&radius=5000",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "search"],
              "query": [
                {
                  "key": "latitude",
                  "value": "40.7128"
                },
                {
                  "key": "longitude",
                  "value": "-74.0060"
                },
                {
                  "key": "radius",
                  "value": "5000"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Attendance with Geofencing",
      "description": "Location-based attendance tracking",
      "item": [
        {
          "name": "Check-In with Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"type\": \"check-in\",\n  \"location\": {\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060,\n    \"accuracy\": 5\n  },\n  \"notes\": \"Started morning shift on time\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/attendance",
              "host": ["{{baseUrl}}"],
              "path": ["attendance"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('attendanceId', response.data._id);",
                  "    pm.test('Check-in location validated', () => {",
                  "        pm.expect(response.data.location).to.have.property('isWithinGeofence');",
                  "        pm.expect(response.data.location).to.have.property('distanceFromJob');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Check-Out with Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"type\": \"check-out\",\n  \"location\": {\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060,\n    \"accuracy\": 3\n  },\n  \"notes\": \"Completed evening shift\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/attendance",
              "host": ["{{baseUrl}}"],
              "path": ["attendance"]
            }
          }
        },
        {
          "name": "Get Attendance by UserId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/attendance/user/{{userId}}?startDate=2025-10-01&endDate=2025-10-31",
              "host": ["{{baseUrl}}"],
              "path": ["attendance", "user", "{{userId}}"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-10-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-10-31"
                }
              ]
            }
          }
        },
        {
          "name": "Validate Attendance Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"latitude\": 40.7128,\n  \"longitude\": -74.0060\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/attendance/validate-location",
              "host": ["{{baseUrl}}"],
              "path": ["attendance", "validate-location"]
            }
          }
        }
      ]
    },
    {
      "name": "Applications Management",
      "description": "Job application management with userId support",
      "item": [
        {
          "name": "Apply for Job",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"coverLetter\": \"I am very interested in this construction position and have 5 years of experience.\",\n  \"expectedSalary\": 28,\n  \"availability\": {\n    \"startDate\": \"2025-10-15\",\n    \"preferredShifts\": [\"morning\", \"afternoon\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/applications",
              "host": ["{{baseUrl}}"],
              "path": ["applications"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('applicationId', response.data._id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Applications by UserId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/applications/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["applications", "user", "{{userId}}"]
            }
          }
        },
        {
          "name": "Update Application Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"accepted\",\n  \"notes\": \"Candidate selected for the position\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/applications/{{applicationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["applications", "{{applicationId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Business Management",
      "description": "Business profile and location management",
      "item": [
        {
          "name": "Create Business Profile",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"ABC Construction Company\",\n  \"description\": \"Leading construction company in NYC\",\n  \"industry\": \"Construction\",\n  \"location\": {\n    \"address\": \"789 Business Ave, New York, NY 10003\",\n    \"latitude\": 40.7589,\n    \"longitude\": -73.9851,\n    \"googlePlaceId\": \"ChIJOwg_06VPwokRYv534QaPC8g\"\n  },\n  \"contact\": {\n    \"phone\": \"+1234567890\",\n    \"email\": \"info@abcconstruction.com\",\n    \"website\": \"https://abcconstruction.com\"\n  },\n  \"employees\": 50,\n  \"founded\": \"2010-01-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/businesses",
              "host": ["{{baseUrl}}"],
              "path": ["businesses"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('businessId', response.data._id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Business by UserId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/businesses/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["businesses", "user", "{{userId}}"]
            }
          }
        },
        {
          "name": "Get Payments by UserId",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/payments/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "user", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response should be successful', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Should return payments data', () => {",
                  "        pm.expect(response.status).to.equal('success');",
                  "        pm.expect(response).to.have.property('data');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Notifications by UserId", 
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/notifications/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["notifications", "user", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response should be successful', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Should return notifications data', () => {",
                  "        pm.expect(response.status).to.equal('success');",
                  "        pm.expect(response).to.have.property('data');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Subscription by UserId",
          "request": {
            "method": "GET", 
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["subscriptions", "user", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response should be successful', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Should return subscription data', () => {",
                  "        pm.expect(response.status).to.equal('success');",
                  "        pm.expect(response).to.have.property('data');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "UserId Data Access",
      "description": "Public endpoints for team members to access employee data using userId only (no authentication required)",
      "item": [
        {
          "name": "Complete Employee Data Access",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/jobs/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "user", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test", 
              "script": {
                "exec": [
                  "// This is a demo request showing how team members can access employee data",
                  "// Replace {{userId}} with the actual employee userId from team access grant",
                  "",
                  "pm.test('Jobs data should be accessible', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "// Team members can call ALL these endpoints with the same userId:",
                  "// GET {{baseUrl}}/jobs/user/{{userId}}",
                  "// GET {{baseUrl}}/applications/user/{{userId}}", 
                  "// GET {{baseUrl}}/attendance/user/{{userId}}",
                  "// GET {{baseUrl}}/businesses/user/{{userId}}",
                  "// GET {{baseUrl}}/payments/user/{{userId}}",
                  "// GET {{baseUrl}}/notifications/user/{{userId}}",
                  "// GET {{baseUrl}}/subscriptions/user/{{userId}}",
                  "",
                  "console.log('📋 UserId-based endpoints available for team access:');",
                  "console.log('• Jobs: GET /api/jobs/user/' + pm.environment.get('userId'));",
                  "console.log('• Applications: GET /api/applications/user/' + pm.environment.get('userId'));",
                  "console.log('• Attendance: GET /api/attendance/user/' + pm.environment.get('userId'));", 
                  "console.log('• Businesses: GET /api/businesses/user/' + pm.environment.get('userId'));",
                  "console.log('• Payments: GET /api/payments/user/' + pm.environment.get('userId'));",
                  "console.log('• Notifications: GET /api/notifications/user/' + pm.environment.get('userId'));",
                  "console.log('• Subscriptions: GET /api/subscriptions/user/' + pm.environment.get('userId'));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Testing Scenarios",
      "description": "Comprehensive testing scenarios for all features",
      "item": [
        {
          "name": "Test Team Access Workflow",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"scenario\": \"team_access_workflow\",\n  \"steps\": [\n    \"1. Register two users (employer and manager)\",\n    \"2. Employer creates job with location\",\n    \"3. Employer grants manager access with specific permissions\",\n    \"4. Manager accesses employer's data using userId\",\n    \"5. Manager creates attendance record\",\n    \"6. Employer reviews team activities\"\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/test/scenarios/team-access",
              "host": ["{{baseUrl}}"],
              "path": ["test", "scenarios", "team-access"]
            }
          }
        },
        {
          "name": "Test Location Validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"scenario\": \"location_validation\",\n  \"testCases\": [\n    {\n      \"name\": \"Valid location within geofence\",\n      \"jobLocation\": { \"lat\": 40.7128, \"lng\": -74.0060, \"radius\": 100 },\n      \"userLocation\": { \"lat\": 40.7130, \"lng\": -74.0062 },\n      \"expected\": \"success\"\n    },\n    {\n      \"name\": \"Invalid location outside geofence\",\n      \"jobLocation\": { \"lat\": 40.7128, \"lng\": -74.0060, \"radius\": 100 },\n      \"userLocation\": { \"lat\": 40.7200, \"lng\": -74.0200 },\n      \"expected\": \"geofence_violation\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/test/scenarios/location-validation",
              "host": ["{{baseUrl}}"],
              "path": ["test", "scenarios", "location-validation"]
            }
          }
        },
        {
          "name": "Test UserId Data Aggregation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/test/userid-data/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["test", "userid-data", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('All data modules present', () => {",
                  "    const response = pm.response.json();",
                  "    const requiredModules = ['jobs', 'applications', 'attendance', 'employments', 'payments'];",
                  "    requiredModules.forEach(module => {",
                  "        pm.expect(response.data).to.have.property(module);",
                  "    });",
                  "});",
                  "",
                  "pm.test('UserId consistency', () => {",
                  "    const response = pm.response.json();",
                  "    const userId = pm.environment.get('userId');",
                  "    // Check that all data belongs to the correct userId",
                  "    if (response.data.jobs.length > 0) {",
                  "        pm.expect(response.data.jobs[0].userId).to.equal(userId);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}