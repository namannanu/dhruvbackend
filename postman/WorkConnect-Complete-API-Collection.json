{
  "info": {
    "name": "WorkConnect Backend API - Team Management Collection",
    "description": "Comprehensive API collection for WorkConnect backend with team management, permission-based access control, and multi-business support. Features cleaned JWT structure without redundant userId field.",
    "version": "3.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'https://dhruvbackend.vercel.app/api');",
          "}",
          "",
          "// Generate test business ID",
          "if (!pm.environment.get('testBusinessId')) {",
          "    const businessId = '6' + Math.random().toString(16).substring(2, 26);",
          "    pm.environment.set('testBusinessId', businessId);",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://dhruvbackend.vercel.app/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "businessId",
      "value": "",
      "type": "string"
    },
    {
      "key": "teamMemberId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication endpoints",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"password\": \"securePassword123\",\n  \"userType\": \"employer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.user) {",
                  "        pm.environment.set('userId', response.data.user._id);",
                  "        pm.test('Registration successful', () => {",
                  "            pm.expect(response.data.user._id).to.be.a('string');",
                  "            pm.expect(response.data.user._id).to.have.lengthOf(24);",
                  "        });",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.token) {",
                  "        pm.environment.set('authToken', response.token);",
                  "    }",
                  "    if (response.data && response.data.user) {",
                  "        pm.environment.set('userId', response.data.user._id);",
                  "    }",
                  "    if (response.data && response.data.businessContext) {",
                  "        pm.environment.set('businessId', response.data.businessContext.businessId);",
                  "        pm.environment.set('userRole', response.data.businessContext.role);",
                  "    }",
                  "    pm.test('Login successful', () => {",
                  "        pm.expect(response.token).to.be.a('string');",
                  "    });",
                  "    pm.test('JWT structure is clean (no userId field)', () => {",
                  "        const tokenParts = response.token.split('.');",
                  "        const payload = JSON.parse(atob(tokenParts[1]));",
                  "        pm.expect(payload).to.have.property('id');",
                  "        pm.expect(payload).to.not.have.property('userId');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Team Management",
      "description": "Team management and business context switching endpoints",
      "item": [
        {
          "name": "Get User Businesses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/businesses",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "businesses"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Businesses retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('success');",
                  "    if (response.data && response.data.length > 0) {",
                  "        pm.environment.set('businessId', response.data[0].businessId);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Switch Business Context",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"businessId\": \"{{businessId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/switch-business",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "switch-business"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Business context switched successfully', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);",
                  "    const response = pm.response.json();",
                  "    if (response.token) {",
                  "        pm.environment.set('authToken', response.token);",
                  "    }",
                  "    if (response.data && response.data.businessContext) {",
                  "        pm.environment.set('businessId', response.data.businessContext.businessId);",
                  "        pm.environment.set('userRole', response.data.businessContext.role);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Permissions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/permissions?businessId={{businessId}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "permissions"],
              "query": [
                {
                  "key": "businessId",
                  "value": "{{businessId}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Permissions retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('success');",
                  "    pm.expect(response.permissions).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Team Member Info",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/team-member?businessId={{businessId}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "team-member"],
              "query": [
                {
                  "key": "businessId",
                  "value": "{{businessId}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Team member info retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('success');",
                  "    if (response.teamMember) {",
                  "        pm.environment.set('teamMemberId', response.teamMember._id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Data Management",
      "description": "User-based data access endpoints with business context",
      "item": [
        {
          "name": "Get All User Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/data/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "data", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response has all data sections', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('jobs');",
                  "    pm.expect(response.data).to.have.property('applications');",
                  "    pm.expect(response.data).to.have.property('attendance');",
                  "    pm.expect(response.data).to.have.property('employments');",
                  "    pm.expect(response.data).to.have.property('payments');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/profile/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile", "{{userId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Team Management",
      "description": "Team access control and delegation endpoints",
      "item": [
        {
          "name": "Grant Team Access",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"manager@company.com\",\n  \"name\": \"Team Manager\",\n  \"role\": \"manager\",\n  \"permissions\": [\n    \"create_jobs\",\n    \"edit_jobs\",\n    \"view_jobs\",\n    \"hire_workers\",\n    \"view_applications\",\n    \"manage_applications\",\n    \"create_schedules\",\n    \"view_attendance\",\n    \"view_team_members\"\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/team/grant-access",
              "host": ["{{baseUrl}}"],
              "path": ["team", "grant-access"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('teamAccessId', response.data.teamAccess._id);",
                  "    pm.test('Team access granted successfully', () => {",
                  "        pm.expect(response.data.teamAccess.role).to.equal('manager');",
                  "        pm.expect(response.data.teamAccess.status).to.equal('active');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "List My Team Members",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/team/my-team",
              "host": ["{{baseUrl}}"],
              "path": ["team", "my-team"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response contains team members', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('teamMembers');",
                  "    pm.expect(response.data.teamMembers).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List My Managed Access",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/team/my-access",
              "host": ["{{baseUrl}}"],
              "path": ["team", "my-access"]
            }
          }
        },
        {
          "name": "Check Team Access",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/team/check-access/{{userId}}?permission=canCreateJobs",
              "host": ["{{baseUrl}}"],
              "path": ["team", "check-access", "{{userId}}"],
              "query": [
                {
                  "key": "permission",
                  "value": "canCreateJobs"
                }
              ]
            }
          }
        },
        {
          "name": "Update Team Permissions",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"staff\",\n  \"permissions\": {\n    \"canCreateJobs\": false,\n    \"canEditJobs\": false,\n    \"canViewJobs\": true,\n    \"canViewApplications\": true,\n    \"canViewAttendance\": true\n  },\n  \"expiresAt\": \"2025-11-30T23:59:59.000Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/team/access/{{teamAccessId}}",
              "host": ["{{baseUrl}}"],
              "path": ["team", "access", "{{teamAccessId}}"]
            }
          }
        },
        {
          "name": "Revoke Team Access",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Project completed, access no longer needed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/team/access/{{teamAccessId}}",
              "host": ["{{baseUrl}}"],
              "path": ["team", "access", "{{teamAccessId}}"]
            }
          }
        },
        {
          "name": "Get Access Report",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/team/report/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["team", "report", "{{userId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Jobs with Location",
      "description": "Enhanced job management with Google Places integration",
      "item": [
        {
          "name": "Create Job with Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Construction Worker\",\n  \"description\": \"Building construction work with safety protocols\",\n  \"location\": {\n    \"address\": \"123 Main Street, New York, NY 10001\",\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060,\n    \"googlePlaceId\": \"ChIJOwg_06VPwokRYv534QaPC8g\",\n    \"geofenceRadius\": 150\n  },\n  \"salary\": 25,\n  \"salaryType\": \"hourly\",\n  \"requirements\": [\"Physical fitness\", \"Construction experience\", \"Safety certification\"],\n  \"workingHours\": {\n    \"start\": \"08:00\",\n    \"end\": \"17:00\"\n  },\n  \"category\": \"construction\",\n  \"skillsRequired\": [\"Heavy lifting\", \"Tool operation\"],\n  \"benefits\": [\"Health insurance\", \"Overtime pay\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/jobs",
              "host": ["{{baseUrl}}"],
              "path": ["jobs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('jobId', response.data._id);",
                  "    pm.test('Job created with location', () => {",
                  "        pm.expect(response.data.location).to.have.property('latitude');",
                  "        pm.expect(response.data.location).to.have.property('longitude');",
                  "        pm.expect(response.data.location.geofenceRadius).to.equal(150);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Jobs by User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/jobs/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "user", "{{userId}}"]
            }
          }
        },
        {
          "name": "Update Job Location",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"location\": {\n    \"address\": \"456 Updated Street, New York, NY 10002\",\n    \"latitude\": 40.7580,\n    \"longitude\": -73.9855,\n    \"googlePlaceId\": \"ChIJOwg_06VPwokRYv534QaPC8g\",\n    \"geofenceRadius\": 200\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "{{jobId}}"]
            }
          }
        },
        {
          "name": "Search Jobs by Location",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/jobs/search?latitude=40.7128&longitude=-74.0060&radius=5000",
              "host": ["{{baseUrl}}"],
              "path": ["jobs", "search"],
              "query": [
                {
                  "key": "latitude",
                  "value": "40.7128"
                },
                {
                  "key": "longitude",
                  "value": "-74.0060"
                },
                {
                  "key": "radius",
                  "value": "5000"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Attendance with Geofencing",
      "description": "Location-based attendance tracking",
      "item": [
        {
          "name": "Check-In with Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"type\": \"check-in\",\n  \"location\": {\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060,\n    \"accuracy\": 5\n  },\n  \"notes\": \"Started morning shift on time\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/attendance",
              "host": ["{{baseUrl}}"],
              "path": ["attendance"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('attendanceId', response.data._id);",
                  "    pm.test('Check-in location validated', () => {",
                  "        pm.expect(response.data.location).to.have.property('isWithinGeofence');",
                  "        pm.expect(response.data.location).to.have.property('distanceFromJob');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Check-Out with Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"type\": \"check-out\",\n  \"location\": {\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060,\n    \"accuracy\": 3\n  },\n  \"notes\": \"Completed evening shift\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/attendance",
              "host": ["{{baseUrl}}"],
              "path": ["attendance"]
            }
          }
        },
        {
          "name": "Get Attendance by User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/attendance/user/{{userId}}?startDate=2025-10-01&endDate=2025-10-31",
              "host": ["{{baseUrl}}"],
              "path": ["attendance", "user", "{{userId}}"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-10-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-10-31"
                }
              ]
            }
          }
        },
        {
          "name": "Validate Attendance Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"latitude\": 40.7128,\n  \"longitude\": -74.0060\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/attendance/validate-location",
              "host": ["{{baseUrl}}"],
              "path": ["attendance", "validate-location"]
            }
          }
        }
      ]
    },
    {
      "name": "Applications Management",
      "description": "Job application management with user authentication",
      "item": [
        {
          "name": "Apply for Job",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"coverLetter\": \"I am very interested in this construction position and have 5 years of experience.\",\n  \"expectedSalary\": 28,\n  \"availability\": {\n    \"startDate\": \"2025-10-15\",\n    \"preferredShifts\": [\"morning\", \"afternoon\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/applications",
              "host": ["{{baseUrl}}"],
              "path": ["applications"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('applicationId', response.data._id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Applications by UserId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/applications/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["applications", "user", "{{userId}}"]
            }
          }
        },
        {
          "name": "Update Application Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"accepted\",\n  \"notes\": \"Candidate selected for the position\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/applications/{{applicationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["applications", "{{applicationId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Business Management",
      "description": "Business profile and location management",
      "item": [
        {
          "name": "Create Business Profile",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"ABC Construction Company\",\n  \"description\": \"Leading construction company in NYC\",\n  \"industry\": \"Construction\",\n  \"location\": {\n    \"address\": \"789 Business Ave, New York, NY 10003\",\n    \"latitude\": 40.7589,\n    \"longitude\": -73.9851,\n    \"googlePlaceId\": \"ChIJOwg_06VPwokRYv534QaPC8g\"\n  },\n  \"contact\": {\n    \"phone\": \"+1234567890\",\n    \"email\": \"info@abcconstruction.com\",\n    \"website\": \"https://abcconstruction.com\"\n  },\n  \"employees\": 50,\n  \"founded\": \"2010-01-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/businesses",
              "host": ["{{baseUrl}}"],
              "path": ["businesses"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('businessId', response.data._id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Business by UserId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/businesses/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["businesses", "user", "{{userId}}"]
            }
          }
        },
        {
          "name": "List Team Members",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/businesses/{{businessId}}/team-members",
              "host": ["{{baseUrl}}"],
              "path": ["businesses", "{{businessId}}", "team-members"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Team members retrieved successfully', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('success');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invite Team Member",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"manager@company.com\",\n  \"name\": \"John Manager\",\n  \"role\": \"manager\",\n  \"permissions\": [\"create_jobs\", \"edit_jobs\", \"view_applications\", \"manage_applications\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/businesses/{{businessId}}/team-members",
              "host": ["{{baseUrl}}"],
              "path": ["businesses", "{{businessId}}", "team-members"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Team member invited successfully', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('success');",
                  "    if (response.data && response.data.teamMember) {",
                  "        pm.environment.set('teamMemberId', response.data.teamMember._id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Team Member",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"supervisor\",\n  \"permissions\": [\"view_jobs\", \"create_schedules\", \"view_applications\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/businesses/{{businessId}}/team-members/{{teamMemberId}}",
              "host": ["{{baseUrl}}"],
              "path": ["businesses", "{{businessId}}", "team-members", "{{teamMemberId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Team member updated successfully', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('success');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Remove Team Member",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/businesses/{{businessId}}/team-members/{{teamMemberId}}",
              "host": ["{{baseUrl}}"],
              "path": ["businesses", "{{businessId}}", "team-members", "{{teamMemberId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Team member removed successfully', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Testing Scenarios",
      "description": "Comprehensive testing scenarios for all features",
      "item": [
        {
          "name": "Test Team Access Workflow",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"scenario\": \"team_access_workflow\",\n  \"steps\": [\n    \"1. Register two users (employer and manager)\",\n    \"2. Employer creates job with location\",\n    \"3. Employer grants manager access with specific permissions\",\n    \"4. Manager accesses employer's data using userId\",\n    \"5. Manager creates attendance record\",\n    \"6. Employer reviews team activities\"\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/test/scenarios/team-access",
              "host": ["{{baseUrl}}"],
              "path": ["test", "scenarios", "team-access"]
            }
          }
        },
        {
          "name": "Test Location Validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"scenario\": \"location_validation\",\n  \"testCases\": [\n    {\n      \"name\": \"Valid location within geofence\",\n      \"jobLocation\": { \"lat\": 40.7128, \"lng\": -74.0060, \"radius\": 100 },\n      \"userLocation\": { \"lat\": 40.7130, \"lng\": -74.0062 },\n      \"expected\": \"success\"\n    },\n    {\n      \"name\": \"Invalid location outside geofence\",\n      \"jobLocation\": { \"lat\": 40.7128, \"lng\": -74.0060, \"radius\": 100 },\n      \"userLocation\": { \"lat\": 40.7200, \"lng\": -74.0200 },\n      \"expected\": \"geofence_violation\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/test/scenarios/location-validation",
              "host": ["{{baseUrl}}"],
              "path": ["test", "scenarios", "location-validation"]
            }
          }
        },
        {
          "name": "Test UserId Data Aggregation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/test/userid-data/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["test", "userid-data", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('All data modules present', () => {",
                  "    const response = pm.response.json();",
                  "    const requiredModules = ['jobs', 'applications', 'attendance', 'employments', 'payments'];",
                  "    requiredModules.forEach(module => {",
                  "        pm.expect(response.data).to.have.property(module);",
                  "    });",
                  "});",
                  "",
                  "pm.test('UserId consistency', () => {",
                  "    const response = pm.response.json();",
                  "    const userId = pm.environment.get('userId');",
                  "    // Check that all data belongs to the correct userId",
                  "    if (response.data.jobs.length > 0) {",
                  "        pm.expect(response.data.jobs[0].userId).to.equal(userId);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}